{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "copl",
    "patterns": [{
            "include": "#keywords"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#expressions"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                    "name": "keyword.control.copl",
                    "match": "\\b(by|def|do|error|fun|in|let|letcc|match|rec|skip|while|with)\\b"
                },
                {
                    "name": "keyword.operator.arithmetic.copl",
                    "match": "(\\+|-|\\*|<|=)[^[0-9]\\-=]"
                },
                {
                    "name": "keyword.operator.signature.copl",
                    "match": "(\\?|\\!|/[^/]|->|--->|-d->|-\\*->|={1,2}>|>>|:=|::)"
                },
                {
                    "name": "keyword.other.expression.copl",
                    "match": "\\b(plus|minus|times|less than|is|evalto|matches|when|not|changes|to)\\b"
                },
                {
                    "name": "support.type.copl",
                    "match": "\\b(bool|int|list|ref)\\b"
                },
                {
                    "name": "keyword.other.envexp_separator.copl",
                    "match": "\\|-"
                }
            ]
        },
        "constants": {
            "patterns": [{
                    "name": "constant.language.rule.copl",
                    "match": "\\b(A-Const|A-Minus|A-Plus|A-Times|A-Var|B-And|B-Const|B-Eq|B-Le|B-Lt|B-Minus|B-Mult|B-Not|B-Or|B-Plus|B-Times|C-Assign|C-Cons|C-EvalArg|C-EvalConsR|C-EvalFun|C-EvalFunC|C-EvalFunR|C-EvalR|C-IfF|C-IfT|C-LetBody|C-Lt|C-MatchCons|C-MatchNil|C-Minus|C-Plus|C-Ret|C-RetCont|C-RetRet|C-Seq|C-Skip|C-Times|C-WhileF|C-WhileT|DR-Plus|DR-PlusL|DR-PlusR|DR-Times|DR-TimesL|DR-TimesR|E-App|E-AppErr1|E-AppErr2|E-AppErr3|E-AppErr4|E-AppErr5|E-AppRec|E-Assign|E-BinOp|E-Bool|E-Cnstr0|E-Cnstr1|E-Cnstr2|E-Cnstr3|E-Cons|E-ConsErr1|E-ConsErr2|E-Const|E-Deref|E-Fun|E-If|E-IfErr1|E-IfErr2|E-IfErr3|E-IfError|E-IfF|E-IfFError|E-IfInt|E-IfT|E-IfTError|E-Int|E-Let|E-LetCc|E-LetErr1|E-LetErr2|E-LetRec|E-LetRecErr|E-Lt|E-LtBoolL|E-LtBoolR|E-LtErr1|E-LtErr2|E-LtErrorL|E-LtErrorR|E-Match|E-MatchCons|E-MatchErr1|E-MatchErr2|E-MatchErr3|E-MatchM1|E-MatchM2|E-MatchN|E-MatchNil|E-Minus|E-MinusBoolL|E-MinusBoolR|E-MinusErr1|E-MinusErr2|E-MinusErrorL|E-MinusErrorR|E-Mult|E-Nil|E-Plus|E-PlusBoolL|E-PlusBoolR|E-PlusErr1|E-PlusErr2|E-PlusErrorL|E-PlusErrorR|E-Ref|E-Reset|E-Shift|E-Times|E-TimesBoolL|E-TimesBoolR|E-TimesErr1|E-TimesErr2|E-TimesErrorL|E-TimesErrorR|E-Var|E-Var1|E-Var2|E-VarErr|L-Succ|L-SuccR|L-SuccSucc|L-Trans|L-Zero|M-Cnstr0|M-Cnstr1|M-Cnstr2|M-Cnstr3|M-Cons|M-Nil|M-Var|M-Wild|MR-Multi|MR-One|MR-Zero|NM-BoolCons|NM-BoolNil|NM-Cnstr00H|NM-Cnstr01|NM-Cnstr02|NM-Cnstr03|NM-Cnstr10|NM-Cnstr11A|NM-Cnstr11H|NM-Cnstr12|NM-Cnstr13|NM-Cnstr20|NM-Cnstr21|NM-Cnstr22H|NM-Cnstr22L|NM-Cnstr22R|NM-Cnstr23|NM-Cnstr30|NM-Cnstr31|NM-Cnstr32|NM-Cnstr33H|NM-Cnstr33L|NM-Cnstr33M|NM-Cnstr33R|NM-ConsConsL|NM-ConsConsR|NM-ConsNil|NM-FunCons|NM-FunNil|NM-IntCons|NM-IntNil|NM-NilCons|NM-RecCons|NM-RecNil|P-Succ|P-Zero|R-Plus|R-PlusL|R-PlusR|R-Times|R-TimesL|R-TimesR|T-Abs|T-App|T-Bool|T-Cnstr0|T-Cnstr1|T-Cnstr2|T-Cnstr3|T-Cons|T-Fun|T-If|T-Int|T-Let|T-LetRec|T-Lt|T-Match|T-MatchLast|T-MatchMore|T-Minus|T-Mult|T-Nil|T-Plus|T-Succ|T-Times|T-Var|T-Var1|T-Var2|T-Zero|TP-Cnstr0|TP-Cnstr1|TP-Cnstr2|TP-Cnstr3|TP-Var|TP-Wild|Tr-App|Tr-Bool|Tr-Fun|Tr-If|Tr-Int|Tr-Let|Tr-LetRec|Tr-Lt|Tr-Minus|Tr-Plus|Tr-Times|Tr-Var1|Tr-Var2)\\b"
                },
                {
                    "name": "constant.numeric.integer.copl",
                    "match": "\\b-?[0-9]+\\b"
                },
                {
                    "name": "constant.language.bool.copl",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.nat.copl",
                    "match": "\\b(Z|S\\([SZ])\\b"
                }
            ]
        },
        "comments": {
            "patterns": [{
                    "name": "comment.line.double-slash.copl",
                    "begin": "//",
                    "end": "\\n"
                },
                {
                    "name": "comment.block.copl",
                    "begin": "\\(\\*",
                    "end": "\\*\\)"
                }
            ]
        },
        "expressions": {
            "patterns": [{
                "name": "variable.parameter.copl",
                "match": "(\\b_\\b)|((?:(?!\\b(?:and|\\*|:|,|@|changes|else|=|false|\\.|fun|-|if|in|\\{|\\(|\\[|<|let|match|matches|\"|rec|\\\\|\\}|\\)|\\]|;|to|then|~|true|\\||when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))"
            }]
        }
    },
    "scopeName": "source.copl"
}
